@page "/"
@page "/home"
@layout MainLayout

@using Radzen
@using Radzen.Blazor
@using Intranet.Models.Kkk
@using System;
@using System.Web;
@using System.Linq;
@using System.Linq.Dynamic.Core;
@using System.Data;
@using System.Text.Encodings.Web;
@using Microsoft.Data.SqlClient;
@using System.Collections.Generic;
@using System.Net.Http;
@using System.Threading.Tasks;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Components;
@using Intranet.Data;
@using System.IO
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment HostEnvironment

@inject KkkContext dbContext
@inject DialogService DialogService
@implements IDisposable

<PageTitle>Home</PageTitle>

<RadzenCard Style=" width: fit-content; min-width: 90%;" Class="mt-3 mx-auto">
    <RadzenMenu  Style="">

        <div class="col-md-6">
        
                <RadzenDropDownDataGrid TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                        Data=@(filters) Style="width: 100%" AllowColumnResize="true"
                                        TextProperty="Staffs" ValueProperty="UnitCode" AllowFilteringByAllStringColumns="true"
                                        Change=@(args => OnChange(args, "find all"))>
                    <Columns>
                      
                         <RadzenDataGridColumn TItem="Staff" Property="UnitCode" Title="Codigo" Width="100px"/>      
                        <RadzenDataGridColumn TItem="Staff" Property="FirstName" Title="Nome" Width="200px"/>
                        <RadzenDataGridColumn TItem="Staff" Property="Surname" Title="Apelido" Width="100px"/>
            
                    </Columns>
                </RadzenDropDownDataGrid>
       

          </div>

          <div class="col-md-6">
                    <RadzenImage Path="images/birthday.png" 
                    Class="rounded-circle float-left mr-3" Click=@(() => OpenBrithday())
                    Style="width: 40px; height: 40px; cursor:pointer" />

                       <RadzenImage Path="images/depto2.png" 
                    Class="rounded-circle float-left mr-3" Click=@(() => OpenDepartments())
                    Style="width: 50px; height: 50px; cursor:pointer" />

          </div>
    </RadzenMenu>
</RadzenCard>

<br/>

  <RadzenTabs style="height: 504px; width: 90%; margin: 20px auto;"
  RenderMode="TabRenderMode.Client">
        <Tabs>

        <RadzenTabsItem Text="Colaboradores">

            <RadzenButton Click=@Reset Icon="refresh" ButtonStyle="ButtonStyle.Primary" Style="border-radius:5px" />
            <p></p>
                <RadzenDataGrid style="" @ref="grid" Count="@count" 
                    Data="@employees" LoadData="@LoadData" IsLoading=@isLoading
                   
                 AllowFiltering="true" AllowColumnResize="true" 
         PageSize="3" AllowPaging="true" AllowSorting="true" FilterMode="FilterMode.SimpleWithMenu"
        ColumnWidth="300px"  SelectionMode="DataGridSelectionMode.Multiple"
        ShowPagingSummary="true" AllowColumnPicking="false">

        <Columns>
           
           <RadzenDataGridColumn TItem="Staff" Filterable="true" Title="Links" Frozen="true" Width="150px">
                 <Template Context="data">

                    <RadzenImage Path="images/MsTeams.png" Click=@(() => OpenTeams(@data.UnitCode)) Icon="check_circle"
                    Style="width: 21px; height: 20px; cursor:pointer" /> &nbsp;

                     <RadzenImage Path="images/MsOutlook02.png" Click=@(() => OpenOutlook(@data.Email)) Icon="check_circle"
                    Style="width: 21px; height: 20px; cursor:pointer" /> &nbsp;

                     <RadzenImage Path="images/MsPhone1.png" Click=@(() => OpenTeams(@data.Extension)) Icon="check_circle"
                    Style="width: 21px; height: 20px; cursor:pointer" />
        
                    </Template>
           </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Staff" Property="UnitCode" Title="Codigo" Width="150px"/>      
            <RadzenDataGridColumn TItem="Staff" Property="FirstName" Title="Nome" Width="250px"/>
            <RadzenDataGridColumn TItem="Staff" Property="Surname" Title="Apelido" Width="150px"/>
            <RadzenDataGridColumn TItem="Staff" Property="Department" Title="Departamento" Width="250px" />
            <RadzenDataGridColumn TItem="Staff" Property="Email" Title="Email" FormatString="{0:d}" Width="250px" />
            <RadzenDataGridColumn TItem="Staff" Property="LocationBranch" Title="Balcão" Width="250px" />
            <RadzenDataGridColumn TItem="Staff" Property="Extension" Title="Extenção" Width="250px" /> 
            
          
        </Columns>
    </RadzenDataGrid>
               
            </RadzenTabsItem>

            <RadzenTabsItem Text="Aplicativos & Links">

                  <div class="row">
                <div class="col-md-6">

                    <RadzenFieldset Text="In Country App" Style="border-radius:5px; color:red">

                         <RadzenDataList PageSize="6" WrapItems="true" AllowPaging="true" 
                                Data="@countryapps"  TItem="App" 
                                ShowPagingSummary="false">

                    <Template Context="order">
                           <a href=@($"{order.Ulr}") target="_blank" style="width:47%; text-decoration:none" class="mr-2 mb-2">

                        <RadzenCard Style="border-radius:10px">
                            <div class="row">
                                <div class="col-md-9 text-truncate">
                                     <RadzenBadge BadgeStyle="BadgeStyle.Secondary"  Text=@($"{order.AppId}") Class="mr-1"/>
                                       <b>@order.Name</b>
                                 </div>

                                 <div class="col-md-3 text-right">
                                     <RadzenBadge BadgeStyle="BadgeStyle.Info" Text="#" Class="mr-1"/>
                                 
                                </div>

                                <!--p class="text-truncate"><RadzenLink Path="@order.Ulr" Text="@order.Description" target="_blank" /></!--p-->
                                   
                            </div>
                            
                        </RadzenCard>
                        </a>
                     
                    </Template>
                </RadzenDataList>

                    </RadzenFieldset>
                </div>

                 <div class="col-md-6">

                    <RadzenFieldset Text="Group Apps"  Style="border-radius:5px;">

                         <RadzenDataList PageSize="6" WrapItems="true" AllowPaging="true" 
                                Data="@groupapps"  TItem="App" 
                                ShowPagingSummary="false">

                    <Template Context="order">
                        <a href=@($"{order.Ulr}") target="_blank" style="width:47%;text-decoration:none" class="mr-2 mb-2">

                        <RadzenCard Style="border-radius:10px;">
                            <div class="row">
                                <div class="col-md-9 text-truncate">
                                     <RadzenBadge BadgeStyle="BadgeStyle.Danger" Text=@($"{order.AppId}") Class="mr-1"/>
                                    <b>@order.Name</b>
                                   
                                </div>
                                <div class="col-md-3 text-right">
                                      <RadzenBadge BadgeStyle="BadgeStyle.Info" Text="#" Class="mr-1"/>
                                   
                                </div>
                                 
                            </div>
                           
                        </RadzenCard>
                        </a>
                    
                        
                    </Template>
                </RadzenDataList>

                  
                    </RadzenFieldset>

                </div>
              </div>

              </RadzenTabsItem>

         <RadzenTabsItem Text="Documentos & Tamplates">
            <div class="row">
                <div class="col-md-3">
  
                       <b style="color:red">Documentos e Formulários</b>
                   
                </div>

                <div class="col-md-9">

                    <RadzenDataGrid @ref="docGrid" AllowFiltering="true" PageSize="3" AllowSorting="true" 
                                  AllowPaging="true"  ShowPagingSummary="true" Data="@documents" TItem="App">

                        <Columns>
                           
                            <RadzenDataGridColumn TItem="App" Property="Employee.LastName" Title="Tipo de Documento" Width="250px">
                                <Template Context="doc">
                                    <RadzenImage Path="images/file.png" style="width: 30px; height: 30px; border-radius: 8px; margin-right: 8px; float: left;" />
                                    <h5 class="mt-1 mb-0">@doc.Name</h5>
                                    <p class="m-0" style="font-size: 0.8em;">@doc.Description</p>
                                </Template>
                            </RadzenDataGridColumn>


                             <RadzenDataGridColumn TItem="App" Width="100px" Property="LastUpdate" Title="Data Registo" FormatString="{0:d}" />

                            <RadzenDataGridColumn Width="40px" TItem="App" Property="AppId" Title="Acção">
                                <Template Context="doc">
                                    <RadzenButton Click=@(() => DownloadFile(doc.Ulr)) Icon="check_circle" Style="border-radius:5px" ButtonStyle="ButtonStyle.Primary" />                           
                                    </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                    </div>
                    </div>

         </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
@code {

    RadzenDataGrid<Staff> grid;
    IEnumerable<Staff> employees;
    IEnumerable<Staff> filters;
    IEnumerable<App> countryapps;
    IEnumerable<App> groupapps;
    IEnumerable<App> documents;
    RadzenDataGrid<Department> deptoGrid;
    IEnumerable<Department> departments;
    RadzenDropDownDataGrid<IEnumerable<string>> sgrid;

    int staffId = 115;
    IEnumerable<string> entries;
    RadzenDataGrid<App> docGrid;

    bool isLoading = false;
    int count;

    protected override void OnInitialized()
    {

        filters= dbContext.Staffs.ToList();
        //departments = dbContext.Departments.ToList();
        //apps = dbContext.Apps.ToList();

        countryapps = dbContext.Apps.Where(o => o.Category == "incountry" ).ToList();
        groupapps = dbContext.Apps.Where(o => o.Category == "ubagroup" ).ToList();
        //var query = dbContext.Apps.AsQueryable();
        //orders = query.ToList();

        //DialogService.OnOpen += Open;
        //  DialogService.OnClose += Close;

        documents = dbContext.Apps.Where(o => o.Category == "Document" ).ToList();

    }

    async Task DownloadFile(String url)
    {

    }

    async Task Reset()
    {
        grid.Reset(true); 
        await grid.FirstPage(true);
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();


        var query = dbContext.Staffs.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            // Filter via the Where method
            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            // Sort via the OrderBy method
            query = query.OrderBy(args.OrderBy);
        }

        // Important!!! Make sure the Count property of RadzenDataGrid is set.
        count = query.Count();

        // Perform paginv via Skip and Take.
        employees = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

        isLoading = false;
    }


    //==================== Codigo de Departments

    async Task OpenTeams(String orderId)
    {
        await DialogService.OpenAsync<AppServices>($"Funcionario - {orderId}",
              new Dictionary<string, object>() { { "StaffId", orderId } },
              new DialogOptions() { Width = "700px", Height = "500px" });
    }

    async Task OpenOutlook(string orderId)
    {
        /*await DialogService.OpenAsync<Staffs>($"Codigo {orderId}",
              new Dictionary<string, object>() { { "OrderID", orderId } },
              new DialogOptions() { Width = "700px", Height = "500px" });*/
    }

    async Task OpenBrithday()
    {
        string date = DateTime.UtcNow.ToString("MM");

        //DateTime dateObject = DateTime.ParseExact(DateTime.UtcNow.ToString("d"),"yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture);

        await DialogService.OpenAsync<DialogBirthday>($"Aniversarios do mês, {DateTime.UtcNow.ToString("MMMM")}",
             new Dictionary<string, object>() { { "StaffId", staffId}},
             new DialogOptions() { Width = "750px", Height = "550px", Resizable = true, Draggable = true });

    }

    DbFunctionAttribute OpenDepartments()
    {
        
    }

   
     public void Dispose()
    {
        // The DialogService is a singleton so it is advisable to unsubscribe.
        DialogService.OnOpen -= Open;
       //DialogService.OnClose -= Close;
    }

     void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        //console.Log("Dialog opened");
    }

      void OnChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

       // console.Log($"{name} value changed to {str}");
    }
   

}